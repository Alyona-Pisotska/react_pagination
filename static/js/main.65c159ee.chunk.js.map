{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","startValue","total","perPage","currentPage","onPageChange","pages","Math","ceil","isFirstItem","isLastItem","length","handlePageChange","buttonType","condition","className","classNames","disabled","href","onClick","map","page","isCurrent","active","items","options","App","useState","setPerPage","setCurrentPage","firstPageItem","lastPageItem","id","value","onChange","event","target","handleOptions","option","htmlFor","item","index","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCKIG,EAA8B,SAAC,GAErC,IADLC,EACI,EADJA,WAAYC,EACR,EADQA,MAAOC,EACf,EADeA,QAASC,EACxB,EADwBA,YAAaC,EACrC,EADqCA,aAEnCC,EAAQZ,EAAWO,EAAYM,KAAKC,KAAKN,EAAQC,IACjDM,EAAcL,IAAgBH,EAC9BS,EAAaN,IAAgBE,EAAMK,OAEnCC,EAAmB,SAACC,EAAoBC,GAKvCA,GACHT,EALgC,SAAfQ,EACfT,EAAcH,EACdG,EAAcH,IAOpB,OACE,qBAAIc,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CAAEC,SAAUR,IAAnD,SACE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAAeT,EACfU,QAAS,kBAAMP,EAAiB,OAAQH,IAL1C,oBAUDH,EAAMc,KAAI,SAAAC,GACT,IAAMC,EAAYD,IAASjB,EAE3B,OACE,oBAEEW,UAAWC,IAAW,YAAa,CAAEO,OAAQD,IAF/C,SAIE,mBACE,UAAQ,WACRP,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMd,EAAagB,IAJ9B,SAMGA,KATEA,MAcX,oBAAIN,UAAWC,IAAW,YAAa,CAAEC,SAAUP,IAAnD,SACE,mBACE,UAAQ,WACRK,UAAU,YACVG,KAAK,QACL,gBAAeR,EACfS,QAAS,kBAAMP,EAAiB,OAAQF,IAL1C,wBCvDFc,EAAQ9B,EAFK,EACL,IAC8B0B,KAAI,SAAAtB,GAAC,qBAAYA,MACvD2B,EAAU,CAAC,EAAG,EAAG,GAAI,IAEdC,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOxB,EAAP,KAAgByB,EAAhB,KACA,EAAsCD,mBAPrB,GAOjB,mBAAOvB,EAAP,KAAoByB,EAApB,KACMC,EARW,GAQmB1B,EARnB,GAQ+CD,EAE1D4B,EAAe3B,EAAcD,EATvB,MAWRC,EAAcD,EAOlB,OACE,sBAAKY,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWX,EADX,mBACiC0B,EADjC,cACoDC,EADpD,eAtBQ,GAsBR,OAIA,sBAAKhB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,MAAO9B,EACP+B,SAAU,SAACC,GAAD,OApBE,SAACA,GACrBP,GAAYO,EAAMC,OAAOH,OACzBJ,EAhBe,GAkCcQ,CAAcF,IALrC,SAOGV,EAAQL,KAAI,SAACkB,GAAD,OACX,wBAAqBL,MAAOK,EAA5B,SAAqCA,GAAxBA,UAKnB,uBAAOC,QAAQ,kBAAkBxB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEd,WAhDW,EAiDXC,MAhDM,GAiDNC,QAASA,EACTC,YAAaA,EACbC,aAAcwB,IAGhB,6BACGL,EAAMJ,KAAI,SAACoB,EAAMC,GAIhB,OAHoBA,IAAUrC,EAzDrB,GAyDiDD,GACvCsC,EAAQrC,EAAcD,EAIrC,oBAAe,UAAQ,OAAvB,SAA+BqC,GAAtBA,GAIN,cCpEjBE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.65c159ee.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  startValue: number;\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (pageNumber: number) => void\n};\n\nexport const Pagination: React.FC<Props> = ({\n  startValue, total, perPage, currentPage, onPageChange,\n}) => {\n  const pages = getNumbers(startValue, Math.ceil(total / perPage));\n  const isFirstItem = currentPage === startValue;\n  const isLastItem = currentPage === pages.length;\n\n  const handlePageChange = (buttonType: string, condition: boolean) => {\n    const changePage = buttonType === 'prev'\n      ? currentPage - startValue\n      : currentPage + startValue;\n\n    if (!condition) {\n      onPageChange(changePage);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', { disabled: isFirstItem })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstItem}\n          onClick={() => handlePageChange('prev', isFirstItem)}\n        >\n          «\n        </a>\n      </li>\n      {pages.map(page => {\n        const isCurrent = page === currentPage;\n\n        return (\n          <li\n            key={page}\n            className={classNames('page-item', { active: isCurrent })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        );\n      })}\n      <li className={classNames('page-item', { disabled: isLastItem })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastItem}\n          onClick={() => handlePageChange('next', isLastItem)}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst startValue = 1;\nconst total = 42;\nconst items = getNumbers(startValue, total).map(n => `Item ${n}`);\nconst options = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(startValue);\n  const firstPageItem = startValue + (currentPage - startValue) * perPage;\n\n  const lastPageItem = currentPage * perPage > total\n    ? total\n    : currentPage * perPage;\n\n  const handleOptions = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setCurrentPage(startValue);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstPageItem} - ${lastPageItem} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => handleOptions(event)}\n          >\n            {options.map((option) => (\n              <option key={option} value={option}>{option}</option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        startValue={startValue}\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {items.map((item, index) => {\n          const isFirstItem = index >= (currentPage - startValue) * perPage;\n          const isLastItem = index < currentPage * perPage;\n\n          if (isFirstItem && isLastItem) {\n            return (\n              <li key={item} data-cy=\"item\">{item}</li>\n            );\n          }\n\n          return null;\n        })}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}